task.wait(3)

local Webhook_URL =
"https://discord.com/api/webhooks/1273045243838730372/bbKAmOZwLFJtF1-wGne7wkOyYH7mQ2DVeOMGHhEBZW8QTm5NM8nGT9K57GxAl0CkR2Pg"
local canrebirth = false;
getgenv().mouse1click = function(p2, p3)
    local A = game:GetService("UserInputService"):GetMouseLocation()
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(p2 or A.X, p3 or A.Y, 0, true, nil, 0)
    task.wait()
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(p2 or A.X, p3 or A.Y, 0, false, nil, 0)
end

getgenv().keypress = function(p1, p2)
    game:GetService("VirtualInputManager"):SendKeyEvent(true, p1, false, nil)
    task.wait()
    game:GetService("VirtualInputManager"):SendKeyEvent(false, p1, false, nil)
end

repeat task.wait() until game:IsLoaded()

pcall(function()
    getconnections(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.Frame.Bar.Play.MouseButton1Down)[1]:Fire()
end)

keypress("E")
local foldercount = 0;
for i, v in pairs(workspace:GetChildren()) do
    if v.Name == "Folder" then
        foldercount = foldercount + 1
        if foldercount == 2 then
            v:Destroy()
        end
    end
end

for i, v in workspace.Enemies:GetChildren() do
    if v:FindFirstChild("ExtraHitbox") then
        v.ExtraHitbox.Size = Vector3.new(1000, 1000, 1000)
        v.HumanoidRootPart.Size = Vector3.new(1000, 1000, 1000)
    end
    if v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid"):FindFirstChild("Animator") then
        v.Humanoid.Animator:Destroy()
    end
end

workspace.Enemies.ChildAdded:Connect(function(v)
    if v:FindFirstChild("ExtraHitbox") then
        v.ExtraHitbox.Size = Vector3.new(10000, 10000, 10000)
        v.HumanoidRootPart.Size = Vector3.new(1000, 1000, 1000)
    end
    if v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid"):FindFirstChild("Animator") then
        v.Humanoid.Animator:Destroy()
    end
end)

for i, v in workspace.Folder:GetDescendants() do
    if v:IsA("TouchTransmitter") then
        -- only allows baseparts not the touchtransmitter itself smh
        firetouchinterest(v.Parent, game:GetService("Players").LocalPlayer.Character.PrimaryPart, 0)
    end
end

workspace.Folder.DescendantAdded:Connect(function(v)
    for i, v in workspace.Folder:GetDescendants() do
        if v:IsA("TouchTransmitter") then
            -- only allows baseparts not the touchtransmitter itself smh
            firetouchinterest(v.Parent, game:GetService("Players").LocalPlayer.Character.PrimaryPart, 0)
        end
    end
end)

task.spawn(function()
    while task.wait() do
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local upgradeCards = playerGui.MainGui.UpgradeCards.Rush

        -- Ensure the cards are fully loaded before proceeding
        if #upgradeCards:GetChildren() > 1 then
            -- Increase the wait time to account for UI delays
            task.wait(1)

            for i, v in pairs(upgradeCards:GetChildren()) do
                if v.Name ~= "UIListLayout" and v.Name ~= "Minions" then
                    local targetCard = upgradeCards:FindFirstChild(v.Name)

                    if not targetCard then
                        warn('Card not found: ' .. v.Name)
                        continue
                    end

                    -- Attempt to purchase the upgrade, regardless of previous purchases
                    local purchaseButton = targetCard.Purchase.MouseButton1Down
                    local connections = getconnections(purchaseButton)

                    if connections and #connections > 0 then
                        for attempt = 1, 3 do
                            -- Fire all connections to ensure the purchase happens
                            for _, conn in pairs(connections) do
                                pcall(function()
                                    conn:Fire()
                                end)
                            end
                            task.wait(0.5) -- Wait between retries to ensure stability
                        end
                    else
                        warn('No connections found for purchase button: ' .. v.Name)
                    end
                end
            end
        end
    end
end)






task.spawn(function()
    while task.wait() do
        for i, v in pairs(workspace.Enemies:GetChildren()) do
            if v:FindFirstChild("HumanoidRootPart") then
                local tween;
                if v.Name == "Prince Pufu" or v.Name == "Chimera King" then
                    local info = TweenInfo.new(
                    (v.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position)
                    .Magnitude / 500, Enum.EasingStyle.Linear)
                    while v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid").Health > 0 do
                        tween = game:GetService("TweenService"):Create(
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart, info,
                            { CFrame = CFrame.new(v.HumanoidRootPart.Position) })
                        tween:Play()
                        tween.Completed:Wait()
                        keypress("Three");
                        mouse1click(500, 500);
                        task.wait()
                    end
                else
                    local info = TweenInfo.new(
                    ((v.HumanoidRootPart.Position + Vector3.new(0, 20, 0)) - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position)
                    .Magnitude / 500, Enum.EasingStyle.Linear)
                    while v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid").Health > 0 do
                        tween = game:GetService("TweenService"):Create(
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart, info,
                            { CFrame = CFrame.new(v.HumanoidRootPart.Position + Vector3.new(0, 20, 0)) })
                        tween:Play()
                        tween.Completed:Wait()
                        mouse1click(500, 500)
                        task.wait()
                    end
                end
            else
                continue;
            end
        end
    end
end)

-- Function to convert shorthand notation to a numerical value
local function convertToNumber(str)
    local suffixes = {
        ["K"] = 1e3,       -- Thousand
        ["M"] = 1e6,       -- Million
        ["B"] = 1e9,       -- Billion
        ["T"] = 1e12,      -- Trillion
        ["Qa"] = 1e15,     -- Quadrillion
        ["Qi"] = 1e18,     -- Quintillion
        ["Sx"] = 1e21,     -- Sextillion
        ["Sp"] = 1e24,     -- Septillion
        ["O"] = 1e27,      -- Octillion
        ["N"] = 1e30,      -- Nonillion
        ["Dc"] = 1e33,     -- Decillion
        ["Ud"] = 1e36,     -- Undecillion
        ["Dd"] = 1e39,     -- Duodecillion
        ["Td"] = 1e42,     -- Tredecillion
        ["Qad"] = 1e45,    -- Quattuordecillion
        ["Qid"] = 1e48,    -- Quindecillion
        ["Sxd"] = 1e51,    -- Sexdecillion
        ["Spd"] = 1e54,    -- Septendecillion
        ["Od"] = 1e57,     -- Octodecillion
        ["Nd"] = 1e60,     -- Novemdecillion
        ["Vg"] = 1e63,     -- Vigintillion
        ["Uv"] = 1e66,     -- Unvigintillion
        ["Ddv"] = 1e69,    -- Duovigintillion
        ["Tg"] = 1e72,     -- Trevigintillion
        ["Qag"] = 1e75,    -- Quattuorvigintillion
        ["Qig"] = 1e78,    -- Quinvigintillion
        ["Sxg"] = 1e81,    -- Sexvigintillion
        ["Spg"] = 1e84,    -- Septenvigintillion
        ["Og"] = 1e87,     -- Octovigintillion
        ["Ng"] = 1e90,     -- Novemvigintillion
        ["Ct"] = 1e93,     -- Centillion
    }

    local value, suffix = str:match("([%d%.]+)(%a*)")
    value = tonumber(value)

    if suffixes[suffix] then
        return value * suffixes[suffix]
    else
        return value
    end
end

-- Compare coin values after converting
local playerCoins = convertToNumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.Coins.TextLabel.Text:sub(1, -2))
local rebirthCost = convertToNumber(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RebirthFrame.Frames.Rebirth.Purchase.Cost.Coins.TextLabel.Text:sub(1, -2))

if playerCoins > rebirthCost then
    canrebirth = true
else
    canrebirth = false
end

local function sendWebhookMessage()
    local data;
    local content = string.format(
        "<@249420234300063745> %s can now rebirth!\nCurrent Coins: %s\nCoins needed for rebirth: %s",
        game:GetService("Players").LocalPlayer.Name,
        game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.Coins.TextLabel.Text:sub(1, -2),
        game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RebirthFrame.Frames.Rebirth.Purchase.Cost.Coins.TextLabel.Text:sub(1, -2)
    )
    if canrebirth then
        data = {
            ["content"] = content,
            ["embeds"] = {
                {
                    ["title"] = "AutoFarm Notification",
                    ["description"] = "This updates every 2 minutes",
                    ["color"] = 0x00FF00,
                    ["fields"] = {
                        {
                            ["name"] = "Current Wave",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Labels.GameModeHeading.Text:lower():gsub("^%l", string.upper)),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Level",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Default.Hotbar.Level.TextLabel.Text:lower():gsub("^%l", string.upper)),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Weapon",
                            ["value"] = tostring(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Default.Hotbar.Main.Viewport:GetChildren()[2]),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Coins",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.Coins.TextLabel.Text),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Gems",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.Gems.TextLabel.Text),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Upgrade Points",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.UpgradePoints.TextLabel.Text),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Player Name",
                            ["value"] = game:GetService("Players").LocalPlayer.Name,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Player ID",
                            ["value"] = tostring(game:GetService("Players").LocalPlayer.UserId),
                            ["inline"] = true
                        }
                    }
                }
            }
        }
    else
        data = {
            ["embeds"] = {
                {
                    ["title"] = "AutoFarm Notification",
                    ["description"] = "This updates every 2 minutes",
                    ["color"] = 0x00FF00,
                    ["fields"] = {
                        {
                            ["name"] = "Current Wave",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Labels.GameModeHeading.Text:lower():gsub("^%l", string.upper)),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Level",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Default.Hotbar.Level.TextLabel.Text:lower():gsub("^%l", string.upper)),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Weapon",
                            ["value"] = tostring(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Default.Hotbar.Main.Viewport:GetChildren()[2]),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Coins",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.Coins.TextLabel.Text),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Gems",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.Gems.TextLabel.Text),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Current Upgrade Points",
                            ["value"] = (game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Left.Currency.UpgradePoints.TextLabel.Text),
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Player Name",
                            ["value"] = game:GetService("Players").LocalPlayer.Name,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Player ID",
                            ["value"] = tostring(game:GetService("Players").LocalPlayer.UserId),
                            ["inline"] = true
                        }
                    }
                }
            }
        }
    end


    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    local success, response = pcall(function()
        return request({
            Url = Webhook_URL,
            Method = "POST",
            Headers = {
                ['Content-Type'] = 'application/json',
            },
            Body = jsonData
        })
    end)
    if not success then
        warn("Failed to send webhook message:", response)
    end
end

task.spawn(function()
    while true do
        sendWebhookMessage()
        task.wait(120)
    end
end)
